import sys
import os
import tempfile
import zipfile
import shutil
import yara
import datetime
import base64

from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QPushButton, QTextEdit,
    QFileDialog, QVBoxLayout, QWidget, QMessageBox, QProgressBar, QLabel, QHBoxLayout,
    QGroupBox, QGridLayout
)
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtGui import QPixmap, QIcon
from apscheduler.schedulers.background import BackgroundScheduler


ICON_BASE64 = """


"""
###############################################################################
# Configuration
###############################################################################
DEFAULT_CONFIG = {
    "system_scan_interval": 60,           # in minutes
    "persistence_scan_interval": 120,     # in minutes
    "scan_compressed": True,
    "exclusions": [],                     # list of normalized paths to exclude
    "scheduled_system_scan_dir": "",      # if non-empty, scheduled system scan uses this directory
    "scheduled_persistence_scan": False   # if True, run persistence scan automatically
}

LOG_FILE = os.path.join(os.path.expanduser("~"), "pyscan_scan_results.log")

###############################################################################
# Path Normalization Helpers
###############################################################################
def normalize_path(path):
    abs_path = os.path.abspath(path)
    return os.path.normcase(os.path.normpath(abs_path))

def is_excluded(path, exclusions):
    norm_target = normalize_path(path)
    for ex_path in exclusions:
        if norm_target.startswith(ex_path):
            return True
    return False

###############################################################################
# Compressed Archive Scanning
###############################################################################
def scan_compressed_file(file_path, rules, result_callback, detection_callback, exclusions):
    if is_excluded(file_path, exclusions):
        return
    ext = os.path.splitext(file_path)[1].lower()
    if ext == ".zip":
        try:
            with zipfile.ZipFile(file_path, 'r') as zf:
                temp_dir = tempfile.mkdtemp()
                zf.extractall(temp_dir)
                for root, dirs, files in os.walk(temp_dir):
                    if is_excluded(root, exclusions):
                        continue
                    for fname in files:
                        extracted_file = os.path.join(root, fname)
                        if is_excluded(extracted_file, exclusions):
                            continue
                        try:
                            matches = rules.match(extracted_file)
                            if matches:
                                msg = (f"Match found in extracted file {extracted_file} "
                                       f"from {file_path}:\n{matches}")
                                result_callback(msg)
                                detection_callback("file", extracted_file, matches)
                        except Exception as e:
                            result_callback(f"Error scanning extracted file {extracted_file}:\n{e}")
                shutil.rmtree(temp_dir)
        except Exception as e:
            result_callback(f"Error processing zip archive {file_path}:\n{e}")
    elif ext == ".rar":
        try:
            import rarfile
            with rarfile.RarFile(file_path, 'r') as rf:
                temp_dir = tempfile.mkdtemp()
                rf.extractall(temp_dir)
                for root, dirs, files in os.walk(temp_dir):
                    if is_excluded(root, exclusions):
                        continue
                    for fname in files:
                        extracted_file = os.path.join(root, fname)
                        if is_excluded(extracted_file, exclusions):
                            continue
                        try:
                            matches = rules.match(extracted_file)
                            if matches:
                                msg = (f"Match found in extracted file {extracted_file} "
                                       f"from {file_path}:\n{matches}")
                                result_callback(msg)
                                detection_callback("file", extracted_file, matches)
                        except Exception as e:
                            result_callback(f"Error scanning extracted file {extracted_file}:\n{e}")
                shutil.rmtree(temp_dir)
        except Exception as e:
            result_callback(f"Error processing rar archive {file_path}:\n{e}")

###############################################################################
# DirectoryScanWorker
###############################################################################
class DirectoryScanWorker(QThread):
    result_signal = pyqtSignal(str)
    detection_signal = pyqtSignal(str, str, object)
    progress_signal = pyqtSignal(int)
    finished_signal = pyqtSignal()

    def __init__(self, directory, rules, total_files, scan_compressed=False, exclusions=None, parent=None):
        super().__init__(parent)
        self.directory = directory
        self.rules = rules
        self.total_files = total_files
        self.scan_compressed = scan_compressed
        self.exclusions = exclusions or []
        self._is_running = True

    def run(self):
        scanned = 0
        for root, dirs, files in os.walk(self.directory):
            if not self._is_running:
                break
            if is_excluded(root, self.exclusions):
                continue

            for fname in files:
                if not self._is_running:
                    break
                scanned += 1
                fullpath = os.path.join(root, fname)
                if is_excluded(fullpath, self.exclusions):
                    continue

                ext = os.path.splitext(fname)[1].lower()
                if self.scan_compressed and ext in [".zip", ".rar"]:
                    scan_compressed_file(fullpath, self.rules,
                                         self.result_signal.emit, self.detection_signal.emit,
                                         self.exclusions)
                else:
                    try:
                        matches = self.rules.match(fullpath)
                        if matches:
                            msg = f"Match found in {fullpath}:\n{matches}"
                            self.result_signal.emit(msg)
                            self.detection_signal.emit("file", fullpath, matches)
                    except Exception as e:
                        self.result_signal.emit(f"Error scanning {fullpath}:\n{e}")
                self.progress_signal.emit(scanned)
        self.finished_signal.emit()

    def stop(self):
        self._is_running = False

###############################################################################
# PersistenceRemoverWorker
###############################################################################
class PersistenceRemoverWorker(QThread):
    result_signal = pyqtSignal(str)
    detection_signal = pyqtSignal(str, str, object)
    finished_signal = pyqtSignal()

    def __init__(self, rules, exclusions=None, parent=None):
        super().__init__(parent)
        self.rules = rules
        self.exclusions = exclusions or []
        self._is_running = True

    def run(self):
        self.scan_registry()
        self.scan_startup_folders()
        self.scan_scheduled_tasks()
        self.scan_windows_services()
        self.scan_wmi_events()
        self.finished_signal.emit()

    def stop(self):
        self._is_running = False

    def scan_registry(self):
        try:
            import winreg
        except ImportError:
            self.result_signal.emit("Registry scanning only supported on Windows.")
            return

        reg_paths = [
            ("HKCU", r"Software\Microsoft\Windows\CurrentVersion\Run"),
            ("HKLM", r"Software\Microsoft\Windows\CurrentVersion\Run"),
        ]
        for hive_name, sub_key in reg_paths:
            if not self._is_running:
                return
            try:
                hive = (winreg.HKEY_CURRENT_USER if hive_name == "HKCU"
                        else winreg.HKEY_LOCAL_MACHINE)
                key = winreg.OpenKey(hive, sub_key, 0, winreg.KEY_READ)
                i = 0
                while True:
                    if not self._is_running:
                        return
                    try:
                        value_name, value_data, _ = winreg.EnumValue(key, i)
                        i += 1
                        if isinstance(value_data, str):
                            matches = self.rules.match(data=value_data.encode("utf-8"))
                            if matches:
                                msg = (f"Match found in registry {hive_name}\\{sub_key} value "
                                       f"'{value_name}': {matches}")
                                self.result_signal.emit(msg)
                                reg_id = f"{hive_name}\\{sub_key}\\{value_name}"
                                self.detection_signal.emit("registry", reg_id, matches)
                    except OSError:
                        break
                winreg.CloseKey(key)
            except Exception as e:
                self.result_signal.emit(f"Error scanning registry {hive_name}\\{sub_key}: {e}")

    def scan_startup_folders(self):
        startup_paths = []
        try:
            startup_paths.append(os.path.join(os.environ["APPDATA"],
                              r"Microsoft\Windows\Start Menu\Programs\Startup"))
        except Exception:
            pass
        startup_paths.append(r"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup")

        for folder in startup_paths:
            if not self._is_running:
                return
            if not os.path.exists(folder):
                continue
            if is_excluded(folder, self.exclusions):
                continue
            for root, dirs, files in os.walk(folder):
                if not self._is_running:
                    return
                if is_excluded(root, self.exclusions):
                    continue
                for fname in files:
                    fullpath = os.path.join(root, fname)
                    if is_excluded(fullpath, self.exclusions):
                        continue
                    try:
                        matches = self.rules.match(fullpath)
                        if matches:
                            msg = f"Match found in Startup folder: {fullpath}:\n{matches}"
                            self.result_signal.emit(msg)
                            self.detection_signal.emit("file", fullpath, matches)
                    except Exception as e:
                        self.result_signal.emit(
                            f"Error scanning file {fullpath} in Startup folder: {e}"
                        )

    def scan_scheduled_tasks(self):
        tasks_folder = r"C:\Windows\System32\Tasks"
        if os.path.exists(tasks_folder):
            if is_excluded(tasks_folder, self.exclusions):
                return
            for root, dirs, files in os.walk(tasks_folder):
                if not self._is_running:
                    return
                if is_excluded(root, self.exclusions):
                    continue
                for fname in files:
                    fullpath = os.path.join(root, fname)
                    if is_excluded(fullpath, self.exclusions):
                        continue
                    try:
                        matches = self.rules.match(fullpath)
                        if matches:
                            msg = f"Match found in Scheduled Tasks: {fullpath}:\n{matches}"
                            self.result_signal.emit(msg)
                            self.detection_signal.emit("file", fullpath, matches)
                    except Exception as e:
                        self.result_signal.emit(
                            f"Error scanning file {fullpath} in Scheduled Tasks: {e}"
                        )

    def scan_windows_services(self):
        try:
            import wmi
            c = wmi.WMI()
            for service in c.Win32_Service():
                if not self._is_running:
                    return
                if service.PathName:
                    exec_path = service.PathName.split()[0].strip('"')
                    if os.path.isfile(exec_path):
                        if is_excluded(exec_path, self.exclusions):
                            continue
                        try:
                            matches = self.rules.match(exec_path)
                            if matches:
                                msg = (f"Match found in Windows Service {service.Name} "
                                       f"with executable {exec_path}:\n{matches}")
                                self.result_signal.emit(msg)
                                self.detection_signal.emit("file", exec_path, matches)
                        except Exception as e:
                            self.result_signal.emit(f"Error scanning {exec_path}:\n{e}")
                    else:
                        self.result_signal.emit(f"Skipping non-file service path: {exec_path}")
        except ImportError:
            self.result_signal.emit("WMI not installed; service scanning not supported.")
        except Exception as e:
            self.result_signal.emit(f"Error scanning Windows Services: {e}")

    def scan_wmi_events(self):
        try:
            import wmi
            c = wmi.WMI(namespace="root\\subscription")
            try:
                events = c.query("SELECT * FROM __EventFilter")
            except Exception:
                events = []
            if not events:
                self.result_signal.emit("No WMI event subscriptions found or not supported.")
            for event in events:
                if not self._is_running:
                    return
                try:
                    event_str = str(event)
                    matches = self.rules.match(data=event_str.encode("utf-8"))
                    if matches:
                        msg = f"Match found in WMI event subscription: {event_str}\n{matches}"
                        self.result_signal.emit(msg)
                        self.detection_signal.emit("registry", f"WMIEvent:{event_str}", matches)
                except Exception as e:
                    self.result_signal.emit(f"Error scanning WMI event: {e}")
        except Exception as e:
            self.result_signal.emit(f"WMI event subscription scanning not available: {e}")

###############################################################################
# ManageExclusionsDialog
###############################################################################
from PyQt5.QtWidgets import QDialog, QListWidget, QListWidgetItem, QVBoxLayout, QPushButton

class ManageExclusionsDialog(QDialog):
    def __init__(self, exclusions, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Manage Exclusions")
        self.exclusions = exclusions

        self.listWidget = QListWidget(self)
        self.removeButton = QPushButton("Remove Selected", self)
        self.closeButton = QPushButton("Close", self)

        self.removeButton.clicked.connect(self.remove_selected_items)
        self.closeButton.clicked.connect(self.close)

        # Populate list
        for ex_path in self.exclusions:
            item = QListWidgetItem(ex_path)
            self.listWidget.addItem(item)

        layout = QVBoxLayout()
        layout.addWidget(self.listWidget)
        layout.addWidget(self.removeButton)
        layout.addWidget(self.closeButton)
        self.setLayout(layout)

    def remove_selected_items(self):
        selected_items = self.listWidget.selectedItems()
        for item in selected_items:
            ex_path = item.text()
            if ex_path in self.exclusions:
                self.exclusions.remove(ex_path)
            self.listWidget.takeItem(self.listWidget.row(item))

###############################################################################
# The Main Application (PyScan)
###############################################################################
class ScannerApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PyScan - A Yara Scanner")
        
         # Set the Base64 icon
        icon_data = base64.b64decode(ICON_BASE64)
        icon_pixmap = QPixmap()
        icon_pixmap.loadFromData(icon_data)
        self.setWindowIcon(QIcon(icon_pixmap))

        self.rules = None
        self.directory_worker = None
        self.persistence_worker = None

        # In-memory only config
        self.config = DEFAULT_CONFIG.copy()

        # Deduplicate detections
        self.seen_detections = set()

        self.scheduler = BackgroundScheduler()

        # Apply a minimal style sheet for a more professional look
        self.apply_style_sheet()

        self.init_ui()
        self.start_scheduler_if_configured()

    def apply_style_sheet(self):
        style_sheet = """
            QMainWindow {
                background-color: #f5f5f5;
            }
            QGroupBox {
                background-color: #ffffff;
                border: 1px solid #ccc;
                border-radius: 5px;
                margin-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top center;
                padding: 0 3px;
            }
            QPushButton {
                padding: 6px 12px;
                margin: 2px;
            }
            QPushButton:hover {
                background-color: #e6e6e6;
            }
            QTextEdit {
                background-color: #ffffff;
                border: 1px solid #ccc;
                border-radius: 4px;
            }
            QProgressBar {
                border: 1px solid #ccc;
                border-radius: 3px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #5cb85c;
            }
        """
        self.setStyleSheet(style_sheet)

    def start_scheduler_if_configured(self):
        if self.config["scheduled_system_scan_dir"]:
            interval = self.config["system_scan_interval"]
            self.scheduler.add_job(self.scheduled_system_scan, 'interval', minutes=interval, id="system_scan")

        if self.config["scheduled_persistence_scan"]:
            interval = self.config["persistence_scan_interval"]
            self.scheduler.add_job(self.scheduled_persistence_scan, 'interval', minutes=interval, id="persistence_scan")

        self.scheduler.start()

    def init_ui(self):
        from PyQt5.QtWidgets import (
            QVBoxLayout, QWidget, QGroupBox, QGridLayout, QHBoxLayout
        )
        

        # --- Group box: Scan Controls ---
        self.scanGroupBox = QGroupBox("Scan Controls")
        self.loadRulesBtn = QPushButton("Load YARA Rules")
        self.loadRulesBtn.clicked.connect(self.load_rules)

        self.systemScanBtn = QPushButton("System Scan")
        self.systemScanBtn.clicked.connect(self.system_scan)
        self.systemScanBtn.setEnabled(False)

        self.singleFileScanBtn = QPushButton("Single File Scan")
        self.singleFileScanBtn.clicked.connect(self.single_file_scan)
        self.singleFileScanBtn.setEnabled(False)

        self.downloadsScanBtn = QPushButton("Scan Downloads Folder")
        self.downloadsScanBtn.clicked.connect(self.scan_downloads_folder)
        self.downloadsScanBtn.setEnabled(False)

        self.persistenceBtn = QPushButton("Persistence Remover")
        self.persistenceBtn.clicked.connect(self.persistence_remover_scan)
        self.persistenceBtn.setEnabled(False)

        scanLayout = QGridLayout()
        scanLayout.addWidget(self.loadRulesBtn,     0, 0, 1, 2)
        scanLayout.addWidget(self.systemScanBtn,    1, 0)
        scanLayout.addWidget(self.singleFileScanBtn,1, 1)
        scanLayout.addWidget(self.downloadsScanBtn, 2, 0)
        scanLayout.addWidget(self.persistenceBtn,   2, 1)
        self.scanGroupBox.setLayout(scanLayout)

        # --- Group box: Additional Controls (Exclusions & About) ---
        self.extraGroupBox = QGroupBox("Exclusion & Info")
        self.excludeFolderBtn = QPushButton("Exclude Folder")
        self.excludeFolderBtn.clicked.connect(self.exclude_folder)

        self.manageExclusionsBtn = QPushButton("Manage Exclusions")
        self.manageExclusionsBtn.clicked.connect(self.manage_exclusions)

        self.aboutBtn = QPushButton("About")
        self.aboutBtn.clicked.connect(self.show_about)

        extraLayout = QHBoxLayout()
        extraLayout.addWidget(self.excludeFolderBtn)
        extraLayout.addWidget(self.manageExclusionsBtn)
        extraLayout.addWidget(self.aboutBtn)
        self.extraGroupBox.setLayout(extraLayout)

        self.resultsText = QTextEdit()
        self.resultsText.setReadOnly(True)

        self.progressBar = QProgressBar()
        self.progressBar.setVisible(False)
        self.progressLabel = QLabel("Scan Progress:")
        barLayout = QHBoxLayout()
        barLayout.addWidget(self.progressLabel)
        barLayout.addWidget(self.progressBar)

        # Main Layout
        mainLayout = QVBoxLayout()
        mainLayout.addWidget(self.scanGroupBox)
        mainLayout.addWidget(self.extraGroupBox)
        mainLayout.addLayout(barLayout)
        mainLayout.addWidget(self.resultsText)

        container = QWidget()
        container.setLayout(mainLayout)
        self.setCentralWidget(container)

    ###############################################################################
    # Logging and Utility
    ###############################################################################
    def log_result(self, message, severity="INFO"):
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        full_message = f"{timestamp} [{severity}] {message}"
        self.resultsText.append(full_message)
        self.write_log(full_message)

    def write_log(self, message):
        try:
            with open(LOG_FILE, "a") as f:
                f.write(message + "\n")
        except Exception as e:
            self.resultsText.append(f"Error writing to log file: {e}")

    ###############################################################################
    # Button/Action Handlers
    ###############################################################################
    def show_about(self):
        """Display a basic About pop-up."""
        about_box = QMessageBox(self)
        about_box.setWindowTitle("About PyScan")
        about_box.setText("Developed by Py_Dev: https://github.com/PyDevOG")
        about_box.exec_()

    def load_rules(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Open YARA Rules File", "", "YARA Files (*.yar *.yara)")
        if file_path:
            try:
                self.rules = yara.compile(filepath=file_path)
                self.log_result(f"Loaded YARA rules from {file_path}")
                self.systemScanBtn.setEnabled(True)
                self.singleFileScanBtn.setEnabled(True)
                self.downloadsScanBtn.setEnabled(True)
                self.persistenceBtn.setEnabled(True)
            except Exception as e:
                self.log_result(f"Error loading YARA rules:\n{e}", "ERROR")

    def count_files(self, directory):
        total = 0
        for _, _, files in os.walk(directory):
            total += len(files)
        return total

    def system_scan(self):
        directory = QFileDialog.getExistingDirectory(self, "Select Directory for System Scan")
        if directory and self.rules:
            total_files = self.count_files(directory)
            self.log_result(f"Starting system scan in {directory} ({total_files} files)...")
            self.progressBar.setMaximum(total_files)
            self.progressBar.setValue(0)
            self.progressBar.setVisible(True)

            self.directory_worker = DirectoryScanWorker(
                directory,
                self.rules,
                total_files,
                scan_compressed=self.config["scan_compressed"],
                exclusions=self.config["exclusions"]
            )
            self.directory_worker.result_signal.connect(self.log_result)
            self.directory_worker.detection_signal.connect(self.handle_detection)
            self.directory_worker.progress_signal.connect(self.progressBar.setValue)
            self.directory_worker.finished_signal.connect(self.system_scan_finished)
            self.directory_worker.start()

    def system_scan_finished(self):
        self.log_result("System scan finished.")
        self.progressBar.setVisible(False)

    def single_file_scan(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Select File to Scan", "", "All Files (*)")
        if file_path and self.rules:
            if is_excluded(file_path, self.config["exclusions"]):
                self.log_result(f"Skipping excluded file: {file_path}", "INFO")
                return
            try:
                matches = self.rules.match(file_path)
                if matches:
                    self.log_result(f"Match found in {file_path}:\n{matches}")
                    self.handle_detection("file", file_path, matches)
                else:
                    self.log_result(f"No match found in {file_path}.")
            except Exception as e:
                self.log_result(f"Error scanning file {file_path}:\n{e}", "ERROR")

    def scan_downloads_folder(self):
        downloads_dir = os.path.join(os.path.expanduser("~"), "Downloads")
        if not os.path.exists(downloads_dir):
            self.log_result(f"Downloads folder not found at {downloads_dir}", "WARNING")
            return

        total_files = self.count_files(downloads_dir)
        self.log_result(f"Starting scan of Downloads folder: {downloads_dir} ({total_files} files)...")
        self.progressBar.setMaximum(total_files)
        self.progressBar.setValue(0)
        self.progressBar.setVisible(True)

        self.directory_worker = DirectoryScanWorker(
            downloads_dir,
            self.rules,
            total_files,
            scan_compressed=self.config["scan_compressed"],
            exclusions=self.config["exclusions"]
        )
        self.directory_worker.result_signal.connect(self.log_result)
        self.directory_worker.detection_signal.connect(self.handle_detection)
        self.directory_worker.progress_signal.connect(self.progressBar.setValue)
        self.directory_worker.finished_signal.connect(lambda: self.log_result("Downloads scan finished."))
        self.directory_worker.finished_signal.connect(lambda: self.progressBar.setVisible(False))
        self.directory_worker.start()

    def persistence_remover_scan(self):
        if self.rules:
            self.log_result("Starting Persistence Remover scan (Registry, Startup, Scheduled Tasks, Services, WMI)...")
            self.persistence_worker = PersistenceRemoverWorker(
                self.rules,
                exclusions=self.config["exclusions"]
            )
            self.persistence_worker.result_signal.connect(self.log_result)
            self.persistence_worker.detection_signal.connect(self.handle_detection)
            self.persistence_worker.finished_signal.connect(
                lambda: self.log_result("Persistence Remover scan finished.")
            )
            self.persistence_worker.start()

    def scheduled_system_scan(self):
        dir_to_scan = self.config["scheduled_system_scan_dir"]
        if dir_to_scan and os.path.exists(dir_to_scan):
            total_files = self.count_files(dir_to_scan)
            self.log_result(f"Scheduled system scan in {dir_to_scan}, {total_files} files.")
            self.progressBar.setMaximum(total_files)
            self.progressBar.setValue(0)
            self.progressBar.setVisible(True)

            self.directory_worker = DirectoryScanWorker(
                dir_to_scan,
                self.rules,
                total_files,
                scan_compressed=self.config["scan_compressed"],
                exclusions=self.config["exclusions"]
            )
            self.directory_worker.result_signal.connect(self.log_result)
            self.directory_worker.detection_signal.connect(self.handle_detection)
            self.directory_worker.progress_signal.connect(self.progressBar.setValue)
            self.directory_worker.finished_signal.connect(self.system_scan_finished)
            self.directory_worker.start()
        else:
            self.log_result("Scheduled system scan directory invalid.", "WARNING")

    def scheduled_persistence_scan(self):
        self.log_result("Starting scheduled Persistence Remover scan...")
        self.persistence_remover_scan()

    def exclude_folder(self):
        folder_path = QFileDialog.getExistingDirectory(self, "Select Folder to Exclude")
        if folder_path:
            norm_ex = normalize_path(folder_path)
            self.config["exclusions"].append(norm_ex)
            self.log_result(f"Excluded folder: {folder_path}", "INFO")

    def manage_exclusions(self):
        from PyQt5.QtWidgets import QDialog
        dlg = ManageExclusionsDialog(self.config["exclusions"], self)
        dlg.exec_()
        self.log_result("Exclusions updated.", "INFO")

    def handle_detection(self, source, identifier, matches):
        normalized_id = normalize_path(identifier)
        if normalized_id in self.seen_detections:
            self.log_result(f"Skipping repeated detection for {identifier}", "INFO")
            return

        self.seen_detections.add(normalized_id)

        if source == "file":
            self.show_file_alert(identifier, matches)
        elif source == "registry":
            self.show_registry_alert(identifier, matches)

    def show_file_alert(self, filepath, matches):
        msg_box = QMessageBox(self)
        msg_box.setWindowTitle("Alert: File Match Detected")
        msg_box.setText(
            f"Match found in:\n{filepath}\n\nMatches: {matches}\n\nChoose action:"
        )
        quarantine_btn = msg_box.addButton("Quarantine", QMessageBox.ActionRole)
        delete_btn = msg_box.addButton("Delete", QMessageBox.ActionRole)
        exclude_btn = msg_box.addButton("Exclude", QMessageBox.ActionRole)
        ignore_btn = msg_box.addButton("Ignore", QMessageBox.RejectRole)
        msg_box.exec_()

        clicked = msg_box.clickedButton()
        if clicked == quarantine_btn:
            self.quarantine_file(filepath)
        elif clicked == delete_btn:
            self.delete_file(filepath)
        elif clicked == exclude_btn:
            self.exclude_file(filepath)

    def show_registry_alert(self, reg_path, matches):
        msg_box = QMessageBox(self)
        msg_box.setWindowTitle("Alert: Registry Match Detected")
        msg_box.setText(
            f"Match found in registry entry:\n{reg_path}\n\nMatches: {matches}\n\nRemove entry?"
        )
        remove_btn = msg_box.addButton("Remove", QMessageBox.ActionRole)
        ignore_btn = msg_box.addButton("Ignore", QMessageBox.RejectRole)
        msg_box.exec_()

        clicked = msg_box.clickedButton()
        if clicked == remove_btn:
            self.remove_registry_entry(reg_path)

    def quarantine_file(self, filepath):
        quarantine_dir = os.path.join(os.path.expanduser("~"), "PyScan_Quarantine")
        if not os.path.exists(quarantine_dir):
            os.makedirs(quarantine_dir)
        try:
            shutil.move(filepath, quarantine_dir)
            self.log_result(f"File quarantined: {filepath}")
        except Exception as e:
            self.log_result(f"Error quarantining file {filepath}: {e}", "ERROR")

    def delete_file(self, filepath):
        try:
            os.remove(filepath)
            self.log_result(f"File deleted: {filepath}")
        except Exception as e:
            self.log_result(f"Error deleting file {filepath}: {e}", "ERROR")

    def exclude_file(self, filepath):
        norm_ex = normalize_path(filepath)
        self.config["exclusions"].append(norm_ex)
        self.log_result(f"Excluded file: {filepath}", "INFO")

    def remove_registry_entry(self, reg_path):
        try:
            import winreg
            parts = reg_path.split("\\")
            hive_str = parts[0]
            value_name = parts[-1]
            key_path = "\\".join(parts[1:-1])
            hive = (winreg.HKEY_CURRENT_USER if hive_str == "HKCU"
                     else winreg.HKEY_LOCAL_MACHINE)
            key = winreg.OpenKey(hive, key_path, 0, winreg.KEY_SET_VALUE)
            winreg.DeleteValue(key, value_name)
            winreg.CloseKey(key)
            self.log_result(f"Registry entry removed: {reg_path}")
        except Exception as e:
            self.log_result(f"Error removing registry entry {reg_path}: {e}", "ERROR")

    def closeEvent(self, event):
        if self.directory_worker:
            self.directory_worker.stop()
            self.directory_worker.wait()
        if self.persistence_worker:
            self.persistence_worker.stop()
            self.persistence_worker.wait()
        if self.scheduler:
            self.scheduler.shutdown()
        event.accept()

###############################################################################
# Main
###############################################################################
def main():
    app = QApplication(sys.argv)
    window = ScannerApp()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
