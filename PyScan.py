import sys
import os
import json
import zipfile
import tempfile
import shutil
import yara
import datetime
import base64

from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QDialog, QTableWidget, QTableWidgetItem,
    QHeaderView, QComboBox, QVBoxLayout, QHBoxLayout, QPushButton, QLabel,
    QTextEdit, QProgressBar, QMessageBox, QFileDialog, QGroupBox, QGridLayout,
    QWidget, QAbstractItemView, QListWidget, QListWidgetItem, QFormLayout, QLineEdit,
    QCheckBox, QSpinBox, QDialogButtonBox
)
from PyQt5.QtCore import QThread, pyqtSignal, Qt
from PyQt5.QtGui import QPixmap, QIcon
from apscheduler.schedulers.background import BackgroundScheduler

###############################################################################
# BASE64-ENCODED ICON
###############################################################################
ICON_BASE64 = """
AAABAAEASEgAAAEAIACIVAAAFgAAACgAAABIAAAAkAAAAAEAIAAAAAAAYFQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAD4AAAB0AAAApQAAAMYAAADjAAAA8QAAAPsAAAD3AAAA7gAAANkAAAC7AAAAlgAAAGYAAAAxAAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQAAAFgAAACuAAAA8gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA7QAAAKsAAABYAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQAAACJAAAA7AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA7QAAAIoAAAAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUwAAAOoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADvAAAAZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAACPAAAA/QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAAAJUAAAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJ0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAN8AAACyAAAA0wAAAP4AAAD/AAAA/wAAAP8AAACJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUQAAAP4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAgQAAAAQAAAAAAAAAAQAAAF0AAAD6AAAA/wAAAP8AAAD8AAAAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAC8AAAAAQAAAAAAAAAAAAAAAAAAAAAAAACRAAAA/wAAAP8AAAD/AAAAowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAAA/AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABvAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABCAAAA/wAAAP8AAAD/AAAA6AAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABxAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABGAAAA/wAAAP8AAAD/AAAA+QAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADFAAAAAgAAAAAAAAAAAAAAAAAAAAAAAACcAAAA/wAAAP8AAAD/AAAA+QAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAlwAAAA4AAAAAAAAABgAAAHUAAAD9AAAA/wAAAP8AAAD/AAAA+QAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPIAAADRAAAA6wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+QAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+QAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+QAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+QAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP4AAACVAAAAlQAAAJUAAACVAAAAlQAAAJUAAACVAAAAlQAAAJUAAACVAAAAlQAAAJUAAACVAAAAlQAAAJUAAACVAAAAkQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAfAAAAMAAAADcAAAA9AAAAPgAAAD4AAAA+AAAAKAAAAAAAAAA4AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP0AAAA+AAAAPgAAAD4AAAA+AAAAPgAAAD4AAAA+AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAPwAAAD8AAAA/AAAAQAAAAEAAAABAAAAAQAAAAEAAAABAAAAAPgAAAC8AAAALAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAAnwAAAO0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAApgAAAAAAAAA2AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD5AAAAtwAAAD0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAG0AAAD3AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAApgAAAAAAAAA1AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPwAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdAAAAP4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAApgAAAAAAAAA0AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD+AAAAbgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBAAAA+wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAApgAAAAAAAAAzAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9AAAACIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADSAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAApgAAAAAAAAAxAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFcAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAApgAAAAAAAAAwAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPkAAAAgAAAAAAAAAAAAAAAAAAAAAAAAALwAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAApwAAAAAAAAAvAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACJAAAAAAAAAAAAAAAAAAAAFAAAAPoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAqQAAAAAAAAAsAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADmAAAABQAAAAAAAAAAAAAAWQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAuAAAAAAAAAAZAAAA/gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAQwAAAAAAAAAAAAAAmAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA3AAAAAAAAAABAAAA6QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAjwAAAAAAAAAAAAAA0AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAAAB8AAAAAAAAAnQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA0QAAAAAAAAAKAAAA+QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAHkAAAAAAAAALgAAAPsAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+wAAAA0AAAAvAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAOUAAAAKAAAAAAAAAIwAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAADYAAABRAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAACKAAAAAAAAAAUAAACuAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAFkAAABqAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD8AAAAUgAAAAAAAAAEAAAAhQAAAPkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAHMAAAB8AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9gAAAFIAAAAAAAAAAAAAACQAAACOAAAA2gAAAP0AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAH4AAACFAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPwAAACPAAAADQAAAAAAAAAAAAAAAAAAAAoAAAAbAAAAHgAAAB8AAAAgAAAAIQAAACIAAAAjAAAAJQAAACYAAAAlAAAAIwAAACIAAAAgAAAAHgAAAB0AAAAbAAAAGgAAABwAAAAuAAAAWAAAAJwAAADvAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIQAAACGAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA6gAAAIMAAAArAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAegAAAPQAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIMAAACAAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA6wAAAMgAAAC5AAAAtgAAALYAAAC2AAAAtgAAALYAAAC2AAAAtgAAALYAAAC2AAAAtgAAALYAAAC2AAAAtgAAALYAAAC1AAAAtQAAALIAAACeAAAAbwAAACQAAAAAAAAAAAAAACYAAADTAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAHIAAABvAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPwAAACwAAAAIwAAAAAAAAASAAAAzgAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAGEAAABaAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA7wAAAEYAAAAAAAAAHAAAAOkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAEIAAAA5AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPQAAAA1AAAAAAAAAFgAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAB8AAAAVAAAA/gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADUAAAABQAAAAEAAADOAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA8QAAAAMAAAAAAAAA4wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAWgAAAAAAAABmAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAwgAAAAAAAAAAAAAAsAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAsgAAAAAAAAAaAAAA/gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAjgAAAAAAAAAAAAAAcQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA6gAAAAEAAAABAAAA5gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAUwAAAAAAAAAAAAAALgAAAP4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAAAAgAAAAAAAAA0AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD6AAAAFQAAAAAAAAAAAAAAAQAAANgAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAA8AAAAAAAAAywAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADEAAAAAAAAAAAAAAAAAAAAAAAAAG4AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAA8AAAAAAAAAygAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAABpAAAAAAAAAAAAAAAAAAAAAAAAAAkAAADcAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAA8AAAAAAAAAygAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAO0AAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/AAAA+QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAA8AAAAAAAAAygAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAHoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAAPsAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAA8AAAAAAAAAygAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAzQAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEsAAADpAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAA8AAAAAAAAAyQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADaAAAAHgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAiAAAAOsAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABAAAAAAAAAAyQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA+wAAAKIAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAYAAAA/AAAAcwAAAJEAAACdAAAAngAAAJ4AAACeAAAAngAAAJ4AAACeAAAAngAAAJ4AAACeAAAAngAAAJ4AAACfAAAAnwAAAJ8AAACfAAAAnwAAAJ8AAACfAAAAnwAAAJ8AAACfAAAAnwAAAKgAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABAAAAAAAAAAfgAAAJ8AAACfAAAAnwAAAJ8AAACfAAAAngAAAJEAAABpAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAADQAAAA0AAAANAAAAEgAAAD+AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAzAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAC9AAAASgAAADIAAABvAAAA7AAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAtAAAA/wAAAP8AAAD/AAAA/wAAALkAAAAEAAAAAAAAAAAAAAAAAAAAMAAAAPcAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAABEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApAAAA/wAAAP8AAAD/AAAA/wAAAD4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKcAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/gAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjAAAA/wAAAP8AAAD/AAAA/wAAAB0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIUAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9QAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPAAAA/gAAAP8AAAD/AAAA/wAAAEkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAwgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4gAAAP8AAAD/AAAA/wAAAMoAAAAMAAAAAAAAAAAAAAAAAAAARgAAAPsAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAaQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmQAAAP8AAAD/AAAA/wAAAP8AAADVAAAAawAAAFQAAACRAAAA9wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADaAAAACQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAAPcAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAPYAAAA6AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAF8AAAD6AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA9QAAAE4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA+AAAAzAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADQAAAAMgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAADgAAACJAAAAygAAAPkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD7AAAAwAAAAFwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAAA3AAAAXwAAAIMAAACnAAAAxAAAANUAAADmAAAA9QAAAPcAAAD3AAAA9gAAAOsAAADYAAAAxQAAAK8AAACLAAAAZgAAAEAAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD////wAA////8AAAD///+AAAH///8AAAD///4AAAB///8AAAD///wAAAA///8AAAD///AAAAAP//8AAAD///AAAAAP//8AAAD//+AAAAQH//8AAAD//+AAAA8H//8AAAD//8AAAB8D//8AAAD//8AAAB8D//8AAAD//8AAAA8D//8AAAD//8AAAAQD//8AAAD//8AAAAAD//8AAAD//8AAAAAD//8AAAD//8AAAAAD//8AAAD//8AAAAAD//8AAAD//8AAAAAD//8AAAD//8AAD/////8AAAD/AEAAAAAAAP8AAAD8AEAAAAAAAD8AAAD4AEAAAAAAAB8AAADwAEAAAAAAAA8AAADgAEAAAAAAAAcAAADAAEAAAAAAAAcAAADAAEAAAAAAAAMAAADAAEAAAAAAAAMAAACAAEAAAAAAAAEAAACAAEAAAAAAAAEAAACAAEAAAAAAAAEAAACAACAAAAAAAAEAAAAAACAAAAAAAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAYAAAAAAAAAAAAAAAHAAAAAAAAAAAAAAAA///8AAAAAAAAAAAAAAADAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAEAAEAAACAAAAAAAAEAAEAAACAAAAAAAAAAAEAAACAAAAAAAACAAEAAACAAAAAAAACAAMAAADAAAAAAAACAAMAAADAAAAAAAACAAMAAADgAAAAAAACAAcAAADwAAAAAAACAAcAAAD4AAAAAAACAA8AAAD8AAAAAAACAB8AAAD/AAAAAAACAH8AAAD/////4AAD//8AAAD//8AAAAAD//8AAAD//8AAAAAD//8AAAD//8AAAAAD//8AAAD//8AAAAAD//8AAAD//8AAAAAD//8AAAD//8AAAAAD//8AAAD//8BwAAAD//8AAAD//8D4AAAD//8AAAD//8D4AAAD//8AAAD//8D4AAAH//8AAAD//+BwAAAH//8AAAD//+AAAAAH//8AAAD//+AAAAAP//8AAAD///AAAAAf//8AAAD///gAAAA///8AAAD///wAAAB///8AAAD////AAAP///8AAAA=

"""

###############################################################################
# FILE PATHS
###############################################################################
CONFIG_FILE = "pyscan_config.json"
LOG_FILE = os.path.join(os.path.expanduser("~"), "pyscan_scan_results.log")

###############################################################################
# DEFAULT SETTINGS
###############################################################################
DEFAULT_CONFIG = {
    "yara_rules_path": "",
    "scan_compressed": True,
    "exclusions": [],
    "scheduled_system_scan_dir": "",
    "system_scan_enabled": False,
    "system_scan_interval": 60,          # in minutes
    "persistence_scan_enabled": False,
    "persistence_scan_interval": 120,    # in minutes
}

###############################################################################
# UTILS: LOAD/SAVE CONFIG
###############################################################################
def load_config():
    """Load from pyscan_config.json or use defaults if missing or invalid."""
    if os.path.exists(CONFIG_FILE):
        try:
            with open(CONFIG_FILE, "r") as f:
                data = json.load(f)
            # merge with DEFAULT_CONFIG to fill missing keys
            merged = dict(DEFAULT_CONFIG)
            for k, v in data.items():
                merged[k] = v
            return merged
        except Exception:
            return dict(DEFAULT_CONFIG)
    else:
        return dict(DEFAULT_CONFIG)

def save_config(config):
    """Save to pyscan_config.json."""
    try:
        with open(CONFIG_FILE, "w") as f:
            json.dump(config, f, indent=4)
    except Exception as e:
        print(f"Error saving config: {e}")

###############################################################################
# PATH NORMALIZATION & EXCLUSION
###############################################################################
def normalize_path(path):
    abs_path = os.path.abspath(path)
    return os.path.normcase(os.path.normpath(abs_path))

def is_excluded(path, exclusions):
    norm_target = normalize_path(path)
    for ex_path in exclusions:
        if norm_target.startswith(ex_path):
            return True
    return False

###############################################################################
# SETTINGS DIALOG
###############################################################################
class SettingsDialog(QDialog):
    """
    Allows user to configure:
      - YARA file path
      - system scan scheduling (enable, interval, directory)
      - persistence scan scheduling (enable, interval)
      - whether to scan compressed archives
    These are stored in pyscan_config.json
    """
    def __init__(self, config, parent=None):
        super().__init__(parent)
        self.setWindowTitle("PyScan Settings")
        self.config = config

        self.layout = QVBoxLayout(self)

        # YARA path
        self.yaraPathLine = QLineEdit(self)
        self.yaraPathLine.setText(self.config.get("yara_rules_path", ""))

        self.yaraBrowseBtn = QPushButton("Browse...")
        self.yaraBrowseBtn.clicked.connect(self.browse_yara)

        yaraH = QHBoxLayout()
        yaraH.addWidget(self.yaraPathLine)
        yaraH.addWidget(self.yaraBrowseBtn)

        # Compressed check
        self.compressCheck = QCheckBox("Scan inside ZIP/RAR")
        self.compressCheck.setChecked(self.config.get("scan_compressed", True))

        # System scan scheduling
        self.systemEnableCheck = QCheckBox("Enable System Scan Scheduling")
        self.systemEnableCheck.setChecked(self.config.get("system_scan_enabled", False))

        self.systemIntervalSpin = QSpinBox()
        self.systemIntervalSpin.setMinimum(1)
        self.systemIntervalSpin.setMaximum(10080)
        self.systemIntervalSpin.setValue(self.config.get("system_scan_interval", 60))

        self.systemDirLine = QLineEdit(self)
        self.systemDirLine.setText(self.config.get("scheduled_system_scan_dir", ""))

        self.systemDirBtn = QPushButton("Browse Dir")
        self.systemDirBtn.clicked.connect(self.browse_system_dir)

        sysDirH = QHBoxLayout()
        sysDirH.addWidget(self.systemDirLine)
        sysDirH.addWidget(self.systemDirBtn)

        # Persistence scheduling
        self.persistenceEnableCheck = QCheckBox("Enable Persistence Scan Scheduling")
        self.persistenceEnableCheck.setChecked(self.config.get("persistence_scan_enabled", False))

        self.persistenceSpin = QSpinBox()
        self.persistenceSpin.setMinimum(1)
        self.persistenceSpin.setMaximum(10080)
        self.persistenceSpin.setValue(self.config.get("persistence_scan_interval", 120))

        form = QFormLayout()
        form.addRow("YARA Rules Path:", yaraH)
        form.addRow(self.compressCheck)
        form.addRow(self.systemEnableCheck)
        form.addRow("System Scan Interval (min):", self.systemIntervalSpin)
        form.addRow("Scheduled System Scan Directory:", sysDirH)
        form.addRow(self.persistenceEnableCheck)
        form.addRow("Persistence Scan Interval (min):", self.persistenceSpin)

        self.layout.addLayout(form)

        btn_box = QDialogButtonBox(QDialogButtonBox.Save | QDialogButtonBox.Cancel)
        btn_box.accepted.connect(self.save_settings)
        btn_box.rejected.connect(self.reject)
        self.layout.addWidget(btn_box)

        self.setLayout(self.layout)
        self.resize(500, 300)

    def browse_yara(self):
        path, _ = QFileDialog.getOpenFileName(self, "Select YARA File", "", "YARA Files (*.yar *.yara)")
        if path:
            self.yaraPathLine.setText(path)

    def browse_system_dir(self):
        path = QFileDialog.getExistingDirectory(self, "Select Directory for Scheduled System Scan")
        if path:
            self.systemDirLine.setText(path)

    def save_settings(self):
        self.config["yara_rules_path"] = self.yaraPathLine.text().strip()
        self.config["scan_compressed"] = self.compressCheck.isChecked()
        self.config["system_scan_enabled"] = self.systemEnableCheck.isChecked()
        self.config["system_scan_interval"] = self.systemIntervalSpin.value()
        self.config["scheduled_system_scan_dir"] = self.systemDirLine.text().strip()
        self.config["persistence_scan_enabled"] = self.persistenceEnableCheck.isChecked()
        self.config["persistence_scan_interval"] = self.persistenceSpin.value()

        save_config(self.config)
        self.accept()

###############################################################################
# FINAL REPORT DIALOG
###############################################################################
class FinalReportDialog(QDialog):
    """
    Presents a table listing all detections. 
    For each detection, user can choose (Ignore, Delete, Exclude).
    If the item is a registry path or wmi event, we handle differently.
    """
    def __init__(self, total_scanned, detections, exclusions, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Scan Report")
        self.total_scanned = total_scanned
        self.detections = detections
        self.exclusions = exclusions

        self.vbox = QVBoxLayout(self)
        stats_label = QLabel(f"Items Scanned: {total_scanned}\nThreats Found: {len(detections)}")
        self.vbox.addWidget(stats_label)

        self.table = QTableWidget(self)
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(["Path/Registry", "Rule(s)", "Action"])
        self.table.setRowCount(len(detections))
        self.table.setEditTriggers(QAbstractItemView.NoEditTriggers)

        header = self.table.horizontalHeader()
        header.setSectionResizeMode(0, QHeaderView.Stretch)
        header.setSectionResizeMode(1, QHeaderView.Stretch)
        header.setSectionResizeMode(2, QHeaderView.Fixed)

        for row, (item_path, matches) in enumerate(detections):
            path_item = QTableWidgetItem(item_path)
            rule_names = [m.rule for m in matches]
            rule_str = ", ".join(rule_names)
            rule_item = QTableWidgetItem(rule_str)

            combo = QComboBox()
            combo.addItems(["Ignore", "Delete", "Exclude"])

            self.table.setItem(row, 0, path_item)
            self.table.setItem(row, 1, rule_item)
            self.table.setCellWidget(row, 2, combo)

        self.vbox.addWidget(self.table)

        btn_layout = QHBoxLayout()
        apply_btn = QPushButton("Apply Actions")
        apply_btn.clicked.connect(self.apply_actions)
        close_btn = QPushButton("Close")
        close_btn.clicked.connect(self.close)
        btn_layout.addWidget(apply_btn)
        btn_layout.addWidget(close_btn)

        self.vbox.addLayout(btn_layout)
        self.resize(800, 400)

    def apply_actions(self):
        for row in range(self.table.rowCount()):
            path_item = self.table.item(row, 0)
            action_combo = self.table.cellWidget(row, 2)
            if path_item and action_combo:
                path_val = path_item.text()
                action = action_combo.currentText()
                if action == "Delete":
                    if path_val.startswith("registry::"):
                        self.delete_registry(path_val)
                    elif path_val.startswith("wmi_event::"):
                        QMessageBox.warning(self, "WMI Delete",
                            "Not fully implemented WMI removal.\n"
                            "You can adapt if needed.")
                    else:
                        # It's a file
                        try:
                            os.remove(path_val)
                        except Exception as e:
                            QMessageBox.warning(self, "Delete Error",
                                f"Failed to delete {path_val}\n{e}")
                elif action == "Exclude":
                    norm_ex = normalize_path(path_val)
                    if norm_ex not in self.exclusions:
                        self.exclusions.append(norm_ex)
                    # Save if you want immediate writing to config?
                    # up to you

        QMessageBox.information(self, "Actions Applied", "All chosen actions have been applied.")
        self.close()

    def delete_registry(self, registry_path):
        """Remove a registry value from something like registry::HKCU\\Software\\.."""
        import winreg
        raw = registry_path[len("registry::"):]
        parts = raw.split("\\")
        hive_str = parts[0]
        val_name = parts[-1]
        key_path = "\\".join(parts[1:-1])
        try:
            if hive_str == "HKCU":
                hive = winreg.HKEY_CURRENT_USER
            elif hive_str == "HKLM":
                hive = winreg.HKEY_LOCAL_MACHINE
            else:
                QMessageBox.warning(self, "Registry Remove Error",
                    f"Unknown hive: {hive_str}")
                return
            key = winreg.OpenKey(hive, key_path, 0, winreg.KEY_SET_VALUE)
            winreg.DeleteValue(key, val_name)
            winreg.CloseKey(key)
        except Exception as e:
            QMessageBox.warning(self, "Registry Remove Error",
                f"Could not remove:\n{registry_path}\n{e}")


###############################################################################
# MANAGE EXCLUSIONS DIALOG
###############################################################################
class ManageExclusionsDialog(QDialog):
    def __init__(self, exclusions, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Manage Exclusions")
        self.exclusions = exclusions

        self.vbox = QVBoxLayout(self)
        self.list_widget = QListWidget(self)
        for ex_path in exclusions:
            self.list_widget.addItem(QListWidgetItem(ex_path))

        self.remove_btn = QPushButton("Remove Selected")
        self.remove_btn.clicked.connect(self.remove_selected)

        self.close_btn = QPushButton("Close")
        self.close_btn.clicked.connect(self.close)

        self.vbox.addWidget(self.list_widget)
        self.vbox.addWidget(self.remove_btn)
        self.vbox.addWidget(self.close_btn)
        self.setLayout(self.vbox)

    def remove_selected(self):
        items = self.list_widget.selectedItems()
        for it in items:
            path_str = it.text()
            if path_str in self.exclusions:
                self.exclusions.remove(path_str)
            self.list_widget.takeItem(self.list_widget.row(it))

###############################################################################
# WORKERS: DIRECTORIES & PERSISTENCE
###############################################################################
class DirectoryScanWorker(QThread):
    log_signal = pyqtSignal(str)
    progress_signal = pyqtSignal(int)
    finished_signal = pyqtSignal(int, list)  # (scanned_count, detections)

    def __init__(self, directory, rules, total_files, scan_compressed, exclusions):
        super().__init__()
        self.directory = directory
        self.rules = rules
        self.total_files = total_files
        self.scan_compressed = scan_compressed
        self.exclusions = exclusions
        self._is_running = True
        self.detections_list = []

    def run(self):
        scanned = 0
        for root, dirs, files in os.walk(self.directory):
            if not self._is_running:
                break
            if is_excluded(root, self.exclusions):
                continue
            for fname in files:
                if not self._is_running:
                    break
                scanned += 1
                if scanned <= self.total_files:
                    self.progress_signal.emit(scanned)
                fullpath = os.path.join(root, fname)
                if is_excluded(fullpath, self.exclusions):
                    continue
                ext = os.path.splitext(fname)[1].lower()
                if self.scan_compressed and ext in [".zip", ".rar"]:
                    scan_compressed_file(fullpath, self.rules,
                                         self.log_signal.emit,
                                         self.exclusions,
                                         self.detections_list)
                else:
                    try:
                        matches = self.rules.match(fullpath)
                        if matches:
                            self.log_signal.emit(f"Match found in {fullpath}:\n{matches}")
                            self.detections_list.append((fullpath, matches))
                    except Exception as e:
                        self.log_signal.emit(f"Error scanning {fullpath}:\n{e}")
        self.finished_signal.emit(scanned, self.detections_list)

    def stop(self):
        self._is_running = False


class PersistenceRemoverWorker(QThread):
    log_signal = pyqtSignal(str)
    finished_signal = pyqtSignal(int, list)  # (items_scanned, detections_list)

    def __init__(self, rules, exclusions):
        super().__init__()
        self.rules = rules
        self.exclusions = exclusions
        self._is_running = True
        self.detections_list = []
        self.items_scanned = 0

    def run(self):
        # Same approach as previously shown
        self.scan_registry()
        self.scan_startup()
        self.scan_tasks()
        self.scan_services()
        self.scan_wmi()
        self.finished_signal.emit(self.items_scanned, self.detections_list)

    def stop(self):
        self._is_running = False

    def scan_registry(self):
        try:
            import winreg
        except ImportError:
            self.log_signal.emit("Registry scanning only on Windows.")
            return

        reg_paths = [
            ("HKCU", r"Software\Microsoft\Windows\CurrentVersion\Run"),
            ("HKLM", r"Software\Microsoft\Windows\CurrentVersion\Run"),
        ]
        for hive_name, sub_key in reg_paths:
            if not self._is_running:
                return
            try:
                hive = (winreg.HKEY_CURRENT_USER if hive_name == "HKCU" 
                        else winreg.HKEY_LOCAL_MACHINE)
                key = winreg.OpenKey(hive, sub_key, 0, winreg.KEY_READ)
                i = 0
                while True:
                    if not self._is_running:
                        return
                    try:
                        val_name, val_data, _ = winreg.EnumValue(key, i)
                        i += 1
                        self.items_scanned += 1
                        if isinstance(val_data, str):
                            matches = self.rules.match(data=val_data.encode("utf-8"))
                            if matches:
                                path_id = f"registry::{hive_name}\\{sub_key}\\{val_name}"
                                self.log_signal.emit(f"Match found in registry: {path_id}\n{matches}")
                                self.detections_list.append((path_id, matches))
                    except OSError:
                        break
                winreg.CloseKey(key)
            except Exception as e:
                self.log_signal.emit(f"Error scanning registry {hive_name}\\{sub_key}: {e}")

    def scan_startup(self):
        startup_paths = []
        try:
            startup_paths.append(os.path.join(os.environ["APPDATA"],
                              r"Microsoft\Windows\Start Menu\Programs\Startup"))
        except:
            pass
        startup_paths.append(r"C:\ProgramData\Microsoft\Windows\Start Menu\Programs\Startup")

        for folder in startup_paths:
            if not self._is_running:
                return
            if not os.path.exists(folder):
                continue
            if is_excluded(folder, self.exclusions):
                continue
            for root, dirs, files in os.walk(folder):
                if not self._is_running:
                    return
                if is_excluded(root, self.exclusions):
                    continue
                for fname in files:
                    fullpath = os.path.join(root, fname)
                    if is_excluded(fullpath, self.exclusions):
                        continue
                    self.items_scanned += 1
                    try:
                        matches = self.rules.match(fullpath)
                        if matches:
                            self.log_signal.emit(f"Match in Startup folder: {fullpath}\n{matches}")
                            self.detections_list.append((fullpath, matches))
                    except Exception as e:
                        self.log_signal.emit(f"Error scanning {fullpath}: {e}")

    def scan_tasks(self):
        tasks_folder = r"C:\Windows\System32\Tasks"
        if os.path.exists(tasks_folder):
            for root, dirs, files in os.walk(tasks_folder):
                if not self._is_running:
                    return
                if is_excluded(root, self.exclusions):
                    continue
                for fname in files:
                    fullpath = os.path.join(root, fname)
                    if is_excluded(fullpath, self.exclusions):
                        continue
                    self.items_scanned += 1
                    try:
                        matches = self.rules.match(fullpath)
                        if matches:
                            self.log_signal.emit(f"Match in Scheduled Task: {fullpath}\n{matches}")
                            self.detections_list.append((fullpath, matches))
                    except Exception as e:
                        self.log_signal.emit(f"Error scanning {fullpath}: {e}")

    def scan_services(self):
        try:
            import wmi
            c = wmi.WMI()
            for service in c.Win32_Service():
                if not self._is_running:
                    return
                if service.PathName:
                    exec_path = service.PathName.split()[0].strip('"')
                    if os.path.isfile(exec_path):
                        if is_excluded(exec_path, self.exclusions):
                            continue
                        self.items_scanned += 1
                        try:
                            matches = self.rules.match(exec_path)
                            if matches:
                                self.log_signal.emit(
                                    f"Match in Windows Service {service.Name} with {exec_path}\n{matches}")
                                self.detections_list.append((exec_path, matches))
                        except Exception as e:
                            self.log_signal.emit(f"Error scanning {exec_path}: {e}")
        except ImportError:
            self.log_signal.emit("WMI not installed; skipping Windows Services.")
        except Exception as e:
            self.log_signal.emit(f"Error scanning Windows Services: {e}")

    def scan_wmi(self):
        try:
            import wmi
            c = wmi.WMI(namespace="root\\subscription")
            try:
                events = c.query("SELECT * FROM __EventFilter")
            except:
                events = []
            for evt in events:
                if not self._is_running:
                    return
                self.items_scanned += 1
                evt_str = str(evt)
                try:
                    matches = self.rules.match(data=evt_str.encode("utf-8"))
                    if matches:
                        self.log_signal.emit(f"Match in WMI Event:\n{evt_str}\n{matches}")
                        wmi_id = f"wmi_event::{evt_str}"
                        self.detections_list.append((wmi_id, matches))
                except Exception as e:
                    self.log_signal.emit(f"Error scanning WMI event: {e}")
        except Exception as e:
            self.log_signal.emit(f"WMI scanning not available: {e}")

###############################################################################
# MAIN WINDOW
###############################################################################
class ScannerApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PyScan – Yara Anti-Malware")

        # Set icon from base64
        icon_data = base64.b64decode(ICON_BASE64)
        pm = QPixmap()
        pm.loadFromData(icon_data)
        self.setWindowIcon(QIcon(pm))

        # Load config or create default
        self.config = load_config()
        # Possibly auto-load YARA if set
        self.rules = None
        if self.config["yara_rules_path"] and os.path.exists(self.config["yara_rules_path"]):
            try:
                self.rules = yara.compile(filepath=self.config["yara_rules_path"])
            except:
                pass

        self.scheduler = BackgroundScheduler()
        self.init_ui()
        self.apply_style_sheet()
        self.start_scheduler_if_configured()

    def apply_style_sheet(self):
        style_sheet = """
            QMainWindow {
                background-color: #f5f5f5;
            }
            QGroupBox {
                background-color: #fff; 
                border: 1px solid #ccc; 
                border-radius: 5px; 
                margin-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                subcontrol-position: top center;
                padding: 0 3px;
            }
            QPushButton {
                padding: 6px 12px;
                margin: 2px;
            }
            QPushButton:hover {
                background-color: #e6e6e6;
            }
            QTextEdit {
                background-color: #fff;
                border: 1px solid #ccc;
                border-radius: 4px;
            }
            QProgressBar {
                border: 1px solid #ccc;
                border-radius: 3px;
                text-align: center;
            }
            QProgressBar::chunk {
                background-color: #5cb85c;
            }
        """
        self.setStyleSheet(style_sheet)

    def init_ui(self):
        # Main scanning group
        self.scanGroup = QGroupBox("Scan Controls")
        self.loadRulesBtn = QPushButton("Load YARA Rules")
        self.loadRulesBtn.clicked.connect(self.load_rules)

        self.systemScanBtn = QPushButton("System Scan")
        self.systemScanBtn.clicked.connect(self.system_scan)
        self.systemScanBtn.setEnabled(bool(self.rules))

        self.singleFileBtn = QPushButton("Single File Scan")
        self.singleFileBtn.clicked.connect(self.single_file_scan)
        self.singleFileBtn.setEnabled(bool(self.rules))

        self.downloadsBtn = QPushButton("Scan Downloads Folder")
        self.downloadsBtn.clicked.connect(self.scan_downloads)
        self.downloadsBtn.setEnabled(bool(self.rules))

        self.persistenceBtn = QPushButton("Persistence Remover")
        self.persistenceBtn.clicked.connect(self.persistence_scan)
        self.persistenceBtn.setEnabled(bool(self.rules))

        grid = QGridLayout()
        grid.addWidget(self.loadRulesBtn,       0, 0, 1, 2)
        grid.addWidget(self.systemScanBtn,      1, 0)
        grid.addWidget(self.singleFileBtn,      1, 1)
        grid.addWidget(self.downloadsBtn,       2, 0)
        grid.addWidget(self.persistenceBtn,     2, 1)
        self.scanGroup.setLayout(grid)

        # Extras group
        self.extraGroup = QGroupBox("Exclusion, Info, and Settings")
        self.excludeFolderBtn = QPushButton("Exclude Folder")
        self.excludeFolderBtn.clicked.connect(self.exclude_folder)

        self.manageExBtn = QPushButton("Manage Exclusions")
        self.manageExBtn.clicked.connect(self.manage_exclusions)

        self.settingsBtn = QPushButton("Settings")
        self.settingsBtn.clicked.connect(self.open_settings)

        self.aboutBtn = QPushButton("About")
        self.aboutBtn.clicked.connect(self.show_about)

        hLay = QHBoxLayout()
        hLay.addWidget(self.excludeFolderBtn)
        hLay.addWidget(self.manageExBtn)
        hLay.addWidget(self.settingsBtn)
        hLay.addWidget(self.aboutBtn)
        self.extraGroup.setLayout(hLay)

        # Results text and progress
        self.resultsText = QTextEdit()
        self.resultsText.setReadOnly(True)

        self.progressBar = QProgressBar()
        self.progressBar.setVisible(False)
        self.progressLabel = QLabel("Scan Progress:")
        pbLay = QHBoxLayout()
        pbLay.addWidget(self.progressLabel)
        pbLay.addWidget(self.progressBar)

        mainLay = QVBoxLayout()
        mainLay.addWidget(self.scanGroup)
        mainLay.addWidget(self.extraGroup)
        mainLay.addLayout(pbLay)
        mainLay.addWidget(self.resultsText)

        container = QWidget()
        container.setLayout(mainLay)
        self.setCentralWidget(container)

    def start_scheduler_if_configured(self):
        # Clear any old jobs
        for job in self.scheduler.get_jobs():
            self.scheduler.remove_job(job.id)

        # If system scan scheduling is enabled
        if self.config.get("system_scan_enabled", False):
            interval = self.config.get("system_scan_interval", 60)
            dir_ = self.config.get("scheduled_system_scan_dir", "")
            if dir_ and os.path.exists(dir_):
                self.scheduler.add_job(self.scheduled_system_scan, 'interval', minutes=interval, id="system_scan")
        # If persistence scheduling is enabled
        if self.config.get("persistence_scan_enabled", False):
            pinterval = self.config.get("persistence_scan_interval", 120)
            self.scheduler.add_job(self.scheduled_persistence_scan, 'interval', minutes=pinterval, id="persistence_scan")

        self.scheduler.start()

    ###########################################################################
    # LOGGING
    ###########################################################################
    def log_result(self, msg, severity="INFO"):
        ts = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        line = f"{ts} [{severity}] {msg}"
        self.resultsText.append(line)
        try:
            with open(LOG_FILE, "a") as f:
                f.write(line + "\n")
        except Exception as e:
            self.resultsText.append(f"Error writing log: {e}")

    ###########################################################################
    # RULES
    ###########################################################################
    def load_rules(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Open YARA Rules", "", "YARA Files (*.yar *.yara)")
        if file_path:
            try:
                self.rules = yara.compile(filepath=file_path)
                self.log_result(f"Loaded YARA rules from {file_path}")
                self.config["yara_rules_path"] = file_path
                save_config(self.config)

                self.systemScanBtn.setEnabled(True)
                self.singleFileBtn.setEnabled(True)
                self.downloadsBtn.setEnabled(True)
                self.persistenceBtn.setEnabled(True)
            except Exception as e:
                self.log_result(f"Error loading YARA rules:\n{e}", "ERROR")

    ###########################################################################
    # SYSTEM SCAN
    ###########################################################################
    def count_files(self, directory):
        total = 0
        for _, _, files in os.walk(directory):
            total += len(files)
        return total

    def system_scan(self):
        directory = QFileDialog.getExistingDirectory(self, "Select Directory to Scan")
        if directory and self.rules:
            total_files = self.count_files(directory)
            self.log_result(f"Starting system scan of {directory} ({total_files} files).")
            self.progressBar.setMaximum(total_files)
            self.progressBar.setValue(0)
            self.progressBar.setVisible(True)

            self.dir_worker = DirectoryScanWorker(
                directory,
                self.rules,
                total_files,
                scan_compressed=self.config["scan_compressed"],
                exclusions=self.config["exclusions"]
            )
            self.dir_worker.log_signal.connect(self.log_result)
            self.dir_worker.progress_signal.connect(self.progressBar.setValue)
            self.dir_worker.finished_signal.connect(self.system_scan_finished)
            self.dir_worker.start()

    def system_scan_finished(self, scanned_count, detections):
        self.log_result("System scan finished.")
        self.progressBar.setVisible(False)

        if detections:
            dlg = FinalReportDialog(scanned_count, detections, self.config["exclusions"], self)
            dlg.exec_()
        else:
            QMessageBox.information(self, "Scan Completed",
                f"Scanned {scanned_count} items.\nNo threats found.")

    ###########################################################################
    # SINGLE FILE
    ###########################################################################
    def single_file_scan(self):
        file_path, _ = QFileDialog.getOpenFileName(self, "Select File", "", "All Files (*)")
        if file_path and self.rules:
            if is_excluded(file_path, self.config["exclusions"]):
                self.log_result(f"Skipping excluded file: {file_path}")
                return
            try:
                matches = self.rules.match(file_path)
                if matches:
                    self.log_result(f"Match found in {file_path}:\n{matches}")
                    # Show final report with 1 detection
                    detections = [(file_path, matches)]
                    dlg = FinalReportDialog(1, detections, self.config["exclusions"], self)
                    dlg.exec_()
                else:
                    self.log_result(f"No match found in {file_path}.")
            except Exception as e:
                self.log_result(f"Error scanning {file_path}:\n{e}", "ERROR")

    ###########################################################################
    # DOWNLOADS
    ###########################################################################
    def scan_downloads(self):
        dl_dir = os.path.join(os.path.expanduser("~"), "Downloads")
        if not os.path.exists(dl_dir):
            QMessageBox.warning(self, "Not Found", "Downloads folder not found.")
            return
        total_files = self.count_files(dl_dir)
        self.log_result(f"Starting scan of {dl_dir} ({total_files} files).")
        self.progressBar.setMaximum(total_files)
        self.progressBar.setValue(0)
        self.progressBar.setVisible(True)

        self.dir_worker = DirectoryScanWorker(
            dl_dir,
            self.rules,
            total_files,
            scan_compressed=self.config["scan_compressed"],
            exclusions=self.config["exclusions"]
        )
        self.dir_worker.log_signal.connect(self.log_result)
        self.dir_worker.progress_signal.connect(self.progressBar.setValue)
        self.dir_worker.finished_signal.connect(self.system_scan_finished)
        self.dir_worker.start()

    ###########################################################################
    # PERSISTENCE SCAN
    ###########################################################################
    def persistence_scan(self):
        if not self.rules:
            QMessageBox.warning(self, "No Rules", "Please load YARA rules.")
            return
        self.log_result("Starting Persistence Remover scan.")
        self.progressBar.setMaximum(0)
        self.progressBar.setValue(0)
        self.progressBar.setVisible(True)

        self.pers_worker = PersistenceRemoverWorker(
            self.rules,
            self.config["exclusions"]
        )
        self.pers_worker.log_signal.connect(self.log_result)
        self.pers_worker.finished_signal.connect(self.persistence_finished)
        self.pers_worker.start()

    def persistence_finished(self, scanned_count, detections):
        self.log_result("Persistence Remover finished.")
        self.progressBar.setVisible(False)

        if detections:
            dlg = FinalReportDialog(scanned_count, detections, self.config["exclusions"], self)
            dlg.exec_()
        else:
            QMessageBox.information(self, "Persistence Completed",
                f"{scanned_count} items scanned.\nNo threats found.")

    ###########################################################################
    # SCHEDULING
    ###########################################################################
    def scheduled_system_scan(self):
        if not self.rules:
            self.log_result("Skipping scheduled system scan. No YARA rules loaded.", "WARNING")
            return
        dir_ = self.config.get("scheduled_system_scan_dir", "")
        if dir_ and os.path.exists(dir_):
            total_files = self.count_files(dir_)
            self.log_result(f"Scheduled system scan in {dir_} ({total_files} files).")
            self.progressBar.setMaximum(total_files)
            self.progressBar.setValue(0)
            self.progressBar.setVisible(True)

            self.dir_worker = DirectoryScanWorker(
                dir_,
                self.rules,
                total_files,
                self.config["scan_compressed"],
                self.config["exclusions"]
            )
            self.dir_worker.log_signal.connect(self.log_result)
            self.dir_worker.progress_signal.connect(self.progressBar.setValue)
            self.dir_worker.finished_signal.connect(self.system_scan_finished)
            self.dir_worker.start()
        else:
            self.log_result("Scheduled system scan skipped: no directory or invalid path.", "WARNING")

    def scheduled_persistence_scan(self):
        if not self.rules:
            self.log_result("Skipping scheduled persistence scan. No YARA rules loaded.", "WARNING")
            return
        self.log_result("Starting scheduled Persistence Remover scan.")
        self.persistence_scan()

    ###########################################################################
    # EXCLUSIONS, SETTINGS, ABOUT
    ###########################################################################
    def exclude_folder(self):
        folder = QFileDialog.getExistingDirectory(self, "Select Folder to Exclude")
        if folder:
            norm_ex = normalize_path(folder)
            if norm_ex not in self.config["exclusions"]:
                self.config["exclusions"].append(norm_ex)
            save_config(self.config)
            self.log_result(f"Excluded folder: {folder}")

    def manage_exclusions(self):
        dlg = ManageExclusionsDialog(self.config["exclusions"], self)
        dlg.exec_()
        save_config(self.config)
        self.log_result("Exclusions updated.")

    def open_settings(self):
        dlg = SettingsDialog(self.config, self)
        if dlg.exec_() == QDialog.Accepted:
            # re-check scheduling
            self.start_scheduler_if_configured()
            # possibly re-load YARA if path changed
            new_path = self.config.get("yara_rules_path", "")
            if new_path and os.path.exists(new_path):
                try:
                    self.rules = yara.compile(filepath=new_path)
                    self.log_result(f"Loaded YARA rules from {new_path}")
                    self.systemScanBtn.setEnabled(True)
                    self.singleFileBtn.setEnabled(True)
                    self.downloadsBtn.setEnabled(True)
                    self.persistenceBtn.setEnabled(True)
                except Exception as e:
                    self.log_result(f"Error loading YARA rules: {e}", "ERROR")
            else:
                # no path or invalid
                self.rules = None
                self.systemScanBtn.setEnabled(False)
                self.singleFileBtn.setEnabled(False)
                self.downloadsBtn.setEnabled(False)
                self.persistenceBtn.setEnabled(False)

    def show_about(self):
        """A more professional About dialog with clickable link & donation info."""
        about_html = (
            "<h3>PyScan – Multi-Threaded YARA Scanning Tool</h3>"
            "<p>Developed by <b>Py_Dev</b></p>"
            "<p><a href='https://github.com/pydevog/Pyscan'>https://github.com/pydevog/Pyscan</a></p>"
            "<hr>"
            "<p><b>Donate via XMR:</b></p>"
            "<p style='font-family: monospace; font-size: 10pt;'>"
            "47G48PYCUhxWi3yKqVqdRkPYhJwYvUpuKanY29KU6JwLDiEMWLAayWoP2JCJNnh9Ce9E8TcbnhopRDwr9HkAv9u16yM4Aud"
            "</p>"
        )

        msg = QMessageBox(self)
        msg.setWindowTitle("About PyScan")
        msg.setIcon(QMessageBox.Information)
        msg.setTextFormat(Qt.RichText)
        msg.setText(about_html)
        msg.setStandardButtons(QMessageBox.Ok)
        msg.setTextInteractionFlags(Qt.TextBrowserInteraction)  # clickable link
        msg.exec_()

    ###########################################################################
    # CLEANUP
    ###########################################################################
    def closeEvent(self, event):
        # stop threads
        if hasattr(self, 'dir_worker') and self.dir_worker:
            self.dir_worker.stop()
            self.dir_worker.wait()
        if hasattr(self, 'pers_worker') and self.pers_worker:
            self.pers_worker.stop()
            self.pers_worker.wait()
        # shut down scheduler
        if self.scheduler.running:
            self.scheduler.shutdown()
        event.accept()

###############################################################################
# MAIN
###############################################################################
def main():
    app = QApplication(sys.argv)
    window = ScannerApp()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
